import asyncio
from datetime import date
from aiogram import Router, F
from aiogram.types import Message
from openai.types.chat import ChatCompletionMessageParam

from core.bot_instance import bot, gpt_client

from core.persona import BOT_CHARACTER  # –•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞

router = Router()

@router.message(
    F.chat.type.in_({"group", "supergroup"}) &
    (F.entities | F.reply_to_message)
)
async def handle_gpt_mention_or_reply(message: Message):
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    bot_id = bot_info.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç
    is_mentioned = False
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                mention_text = message.text[entity.offset:entity.offset + entity.length]
                if mention_text == f"@{bot_username}":
                    is_mentioned = True

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç—É
    is_reply_to_bot = (
        message.reply_to_message is not None and
        message.reply_to_message.from_user.id == bot_id
    )

    # –ï—Å–ª–∏ –Ω–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∏ —Ä–µ–ø–ª–∞—è ‚Äî –∏–≥–Ω–æ—Ä
    if not is_mentioned and not is_reply_to_bot:
        return

    # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å), –ø–æ–ª—É—á–∞–µ–º user_text
    user_text = message.text
    if is_mentioned:
        user_text = user_text.replace(f"@{bot_username}", "").strip()

    if not user_text:
        await message.reply("üåÄ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –ø—É—Å—Ç–æ—Ç—É.")
        return

    await message.chat.do("typing")

    try:
        messages: list[ChatCompletionMessageParam] = [
            {
                "role": "system",
                "content": (f"""
                    –û—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, —è—Å–Ω–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ ‚Äî –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤.
                    {BOT_CHARACTER}
                    –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Å –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º, —Ç–µ–ø–ª–æ—Ç–æ–π –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ–º –∫ –∏—Å—Ç–∏–Ω–µ.
                    """
                )
            },
            {"role": "user", "content": user_text}
        ]

        response = await asyncio.to_thread(
            gpt_client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.8,
            max_tokens=600,
        )

        reply = response.choices[0].message.content.strip()
        await message.reply(reply)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        await message.reply("‚ö†Ô∏è –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –∑–∞–º–æ–ª—á–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

__all__ = ["router"]