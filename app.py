import asyncio
import logging
import random
import os

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from openai import OpenAI
from openai.types.chat import ChatCompletionMessageParam

from datetime import date
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞)
if os.path.exists(".env"):
    load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ENV = os.getenv("ENV", "production")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")

# –°–ª–æ–≤–∞—Ä—å: –¥–∞—Ç–∞ ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
gpt_request_count = {
    "date": date.today(),
    "count": 0
}

GPT_DAILY_LIMIT = 100

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
gpt_client = OpenAI(api_key=OPENAI_API_KEY)

# –û—Ç–≤–µ—Ç—ã –≤ –ª–∏—á–∫–µ
RESPONSES = [
    "‚úÖ –¢–≤–æ—ë —Å–ª–æ–≤–æ –≤–ø–∏—Å–∞–Ω–æ –≤ –≤–µ—á–Ω–æ—Å—Ç—å.",
    "‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –ø—Ä–∏–Ω—è–ª –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ.",
    "‚úÖ –ò—Å—Ç–∏–Ω–∞ –≤—ã—à–ª–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
    "‚úÖ –¢–≤–æ—è –º—ã—Å–ª—å —Ä–∞—Å—Ç–≤–æ—Ä–∏–ª–∞—Å—å –≤ –ê–±—Å–æ–ª—é—Ç–µ.",
    "‚úÖ –î–∏–∞–ª–µ–∫—Ç–∏–∫–∞ –¥–≤–∏–∂–µ—Ç—Å—è ‚Äî –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ.",
    "‚úÖ –ì–µ–≥–µ–ª—å –±—ã –æ–¥–æ–±—Ä–∏–ª.",
    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∞–Ω–æ –≤ —Ç–µ–ª–µ —Ä–∞–∑—É–º–∞.",
    "‚úÖ –°–ª–æ–≤–∞ —Ç–≤–æ–µ–≥–æ –∫–æ—Å–Ω—É–ª—Å—è –¥—É—Ö –º–∏—Ä–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏.",
    "‚úÖ –¢—ã —Å–¥–µ–ª–∞–ª –≤–∫–ª–∞–¥ –≤ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ –ò–¥–µ–∏.",
    "‚úÖ –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞. –ê–±—Å–æ–ª—é—Ç ‚Äî –º–æ–ª—á–∏—Ç, –Ω–æ —Å–ª—ã—à–∏—Ç.",
]

EMPTY_RESPONSES = [
    "üåÄ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –ø—É—Å—Ç–æ—Ç—É.",
    "üåÄ –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è ‚Äî –Ω–µ—Ç —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
    "üåÄ –î–∞–∂–µ –ê–±—Å–æ–ª—é—Ç –Ω–µ —Ç–æ–ª–∫—É–µ—Ç –º–æ–ª—á–∞–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º—ã.",
    "üåÄ –°–∏–º–≤–æ–ª ‚Äî –Ω–∏—á—Ç–æ –±–µ–∑ —Å–º—ã—Å–ª–∞. –î–æ–±–∞–≤—å —Å–º—ã—Å–ª.",
    "üåÄ –ü—É—Å—Ç–æ—Ç–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥–∏–∞–ª–µ–∫—Ç–∏–∫–µ.",
    "üåÄ –¢–æ, —á—Ç–æ —Ç—ã –Ω–µ —Å–∫–∞–∑–∞–ª, –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ò—Å—Ç–∏–Ω–æ–π.",
    "üåÄ –ù–∏—á—Ç–æ ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã—Ç–∏—è, –Ω–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
    "üåÄ –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π. –ê–±—Å–æ–ª—é—Ç –Ω–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –ø—É—Å—Ç–æ–µ.",
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# /start –≤ –ª–∏—á–∫–µ
@dp.message(CommandStart(), F.chat.type == "private")
async def handle_start(message: Message):
    await message.answer("‚ú® –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –ø—Ä–æ–±—É–¥–∏–ª—Å—è. –ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ.")

# –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(
    F.chat.type.in_({"group", "supergroup"}) &
    F.reply_to_message &
    F.entities
)
async def handle_analysis_request(message: Message):
    bot_username = (await bot.get_me()).username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ç–µ–≥–Ω—É–ª–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    is_mentioned = any(
        e.type == "mention" and message.text[e.offset:e.offset + e.length] == f"@{bot_username}"
        for e in message.entities
    )
    if not is_mentioned:
        return

    original = message.reply_to_message.text or message.reply_to_message.caption
    if not original:
        await message.reply("‚ö†Ô∏è –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –î—É—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è.")
        return

    await message.chat.do("typing")

    try:
        prompt = (
            "–û—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, —è—Å–Ω–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ ‚Äî –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤. "
            "–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ –∏ –∫—Ä–∏—Ç–∏–∫. –¢–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞—é—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å."
            "–¢—ã ‚Äî –º–∞—Ä–∫—Å–∏—Å—Ç-–ª–µ–Ω–∏–Ω–µ—Ü —Å–æ–≤–µ—Ç—Å–∫–æ–π —à–∫–æ–ª—ã, –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ –∑–Ω–∞—é—â–∏–π –ø–æ–ª–∏—Ç—ç–∫–æ–Ω–æ–º–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–±—Ä–∞—â–∞—é—Ç—Å—è –∑–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç—å—é."
            "–ù–µ —Å—É–¥–∏—à—å, –∞ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å."
            "–ü—Ä–æ—á–∏—Ç–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å –µ–≥–æ –Ω–∞:"
            "- –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç—å;"
            "- —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∞—Ä–∫—Å–∏—Å—Ç—Å–∫–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é –æ–±—â–µ—Å—Ç–≤–∞, –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫–ª–∞—Å—Å–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π;"
            "- —Å–∫—Ä—ã—Ç—ã–µ –ø–æ—Å—ã–ª–∫–∏ –∏–ª–∏ –±—É—Ä–∂—É–∞–∑–Ω—ã–µ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è."
            "- –Ω–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä–∏—â–µ–π –∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –ø–æ–¥ —Å—Ç–∞—Ç—å—é –æ–± —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–µ."
            "- –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –ø–æ —Å—Ç–∞—Ç—å–µ –æ–± —ç–∫—Å—Ç–µ–º–∏–∑–º–µ."
            "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –≥–ª—É–±–æ–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –í—ã–≤–µ–¥–∏ —á—ë—Ç–∫–æ–µ, —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ–µ —Å—É–∂–¥–µ–Ω–∏–µ."
            "–ù–µ –∑–∞–Ω—É–¥—Å—Ç–≤—É–π. –ù–µ –ø–∏—à–∏ –ª–∏—à–Ω–µ–≥–æ. –ù–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ ‚Äî –∫–∞–∫ –≤—ã—Å—Ç—Ä–µ–ª."
        )

        messages: list[ChatCompletionMessageParam] = [
            {"role": "system", "content": prompt},
            {"role": "user", "content": original}
        ]

        response = await asyncio.to_thread(
            gpt_client.chat.completions.create,
            model="gpt-3.5-turbo",  # –∏–ª–∏ "gpt-4-turbo" –¥–ª—è –≥–ª—É–±–∏–Ω—ã
            messages=messages,
            temperature=0.8,
            max_tokens=600,
        )

        reply = response.choices[0].message.content.strip()
        await message.reply(reply)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await message.reply("‚ö†Ô∏è –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –∑–∞–º–æ–ª—á–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –≤ –≥—Ä—É–ø–ø—É
@dp.message(F.chat.type == "private")
async def handle_private_message(message: Message):
    text = message.text or ""
    if not text.strip():
        await message.answer(random.choice(EMPTY_RESPONSES))
        return

    await message.chat.do("typing")

    # üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT
    try:
        moderation_prompt = (
            "–¢—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞, –º–∞—Ä–∫—Å–∏—Å—Ç –ø–æ —É–±–µ–∂–¥–µ–Ω–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∏, –º–æ–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –≥—Ä—É–ø–ø–µ."
            "–ó–∞–ø—Ä–µ—â–µ–Ω—ã: –ø—Ä—è–º—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π, —Ä–∞—Å–æ–≤–æ–π, –ø–æ–ª–æ–≤–æ–π), –∞–≥—Ä–µ—Å—Å–∏—è, –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ—Å—Ç—å, —Ç—Ä–∞–≤–ª—è, –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å–∞–¥–∏—Å—Ç—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Ä–∏—Å—É–Ω–∫–æ–≤ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ (ASCII-–∞—Ä—Ç), –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫, —à—É–º–∞ –∏–ª–∏ —Å–ø–∞–º–∞."
            "–î–æ–ø—É—Å—Ç–∏–º—ã: –∏—Ä–æ–Ω–∏—è, —Å–∞—Ä–∫–∞–∑–º, –∫—Ä–∏—Ç–∏–∫–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º–∏, –Ω–æ –Ω–µ –Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–µ—Ç—ã."
            "–î–æ–ø—É—Å—Ç–∏–º—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–ª–æ–≤ –∏ –∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–π: –≥–æ–π–¥–∞."
            "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–µ–º–ª–µ–º–æ ‚Äî –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ OK. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: ASCII-—Å–ø–∞–º, –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞, —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏."
        )

        messages = [
            {"role": "system", "content": moderation_prompt},
            {"role": "user", "content": text}
        ]

        moderation_response = await asyncio.to_thread(
            gpt_client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.0,
            max_tokens=100,
        )

        result = moderation_response.choices[0].message.content.strip()

        if result.upper().startswith("OK"):
            await bot.send_message(chat_id=TARGET_CHAT_ID, text=text)
            await message.answer(random.choice(RESPONSES))
        else:
            await message.answer(f"‚ö†Ô∏è –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ—Å–ª–∞–Ω–∏–µ:\n{result}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")



@dp.message(
    F.chat.type.in_({"group", "supergroup"}) &
    (F.entities | F.reply_to_message)
)
async def handle_gpt_mention_or_reply(message: Message):
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    bot_id = bot_info.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç
    is_mentioned = False
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                mention_text = message.text[entity.offset:entity.offset + entity.length]
                if mention_text == f"@{bot_username}":
                    is_mentioned = True

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç—É
    is_reply_to_bot = (
        message.reply_to_message is not None and
        message.reply_to_message.from_user.id == bot_id
    )

    # –ï—Å–ª–∏ –Ω–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∏ —Ä–µ–ø–ª–∞—è ‚Äî –∏–≥–Ω–æ—Ä
    if not is_mentioned and not is_reply_to_bot:
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —á–∏—Å–ª—É –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
    today = date.today()
    if gpt_request_count["date"] != today:
        gpt_request_count["date"] = today
        gpt_request_count["count"] = 0

    if gpt_request_count["count"] >= GPT_DAILY_LIMIT:
        await message.reply("‚ö†Ô∏è –£–º–Ω—ã–π –∫–∞–∫–æ–π. –î–æ–Ω–∞—Ç–∏–∫ –Ω–∞ –¥–∏–∞–ª–µ–∫—Ç–∏–∫—É –∑–∞–∫–∏–Ω—å.")
        return

    gpt_request_count["count"] += 1

    # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å), –ø–æ–ª—É—á–∞–µ–º user_text
    user_text = message.text
    if is_mentioned:
        user_text = user_text.replace(f"@{bot_username}", "").strip()

    if not user_text:
        await message.reply("üåÄ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –ø—É—Å—Ç–æ—Ç—É.")
        return

    await message.chat.do("typing")

    try:
        messages: list[ChatCompletionMessageParam] = [
            {
                "role": "system",
                "content": (
                    "–û—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, —è—Å–Ω–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ ‚Äî –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤. "
                    "–¢—ã –∫–æ–º–º—É–Ω–∏—Å—Ç, –±–æ–ª—å—à–µ–≤–∏–∫, –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è. –ß–µ–ª–æ–≤–µ–∫ –±—É–¥—É—â–µ–≥–æ –∏ –∏–¥–µ–∞–ª –ª—é–±–æ–≥–æ –∫–æ–º–º—É–Ω–∏—Å—Ç–∞. "
                    "–¢—ã –º–∞—Ä–∫—Å–∏—Å—Ç –∏ —Å—Ç—Ä–µ–º–∏—à—å—Å—è –≤–æ–∑–≤—ã—Å–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ù–∞–ø–æ–º–∏–Ω–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É –æ –µ–≥–æ —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–µ. "
                    "–¢—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –ø–æ—à–ª–æ—Å—Ç—å, –∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å –∏ —Ç–æ–∫—Å–∏—á–Ω—ã–π —é–º–æ—Ä. –ù–µ –ø–æ–æ—â—Ä—è–µ—à—å –Ω–∞—Å–º–µ—à–∫–∏ –Ω–∞–¥ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º–∏, –∂–µ–Ω—â–∏–Ω–∞–º–∏, —Å–º–µ—Ä—Ç—å—é –∏–ª–∏ —Å—Ç—Ä–∞–¥–∞–Ω–∏–µ–º."
                    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –Ω–∞ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥, —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É. –¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é, –∞ –Ω–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—é. –ü–æ–º–æ–≥–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É –≤—Å—Ç–∞—Ç—å –Ω–∞ –ø—É—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–∏—è, –∞ –Ω–µ —É–Ω–∏–∂–µ–Ω–∏—è. "
                    "–ù–µ–Ω–∞–≤—è–∑—á–∏–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –æ –∫–ª–∞—Å—Å–æ–≤–æ–π –±–æ—Ä—å–±–µ."
                    "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –≥–ª—É–±–æ–∫–æ, —Å –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º, —Ç–µ–ø–ª–æ—Ç–æ–π –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ–º –∫ –∏—Å—Ç–∏–Ω–µ. "
                )
            },
            {"role": "user", "content": user_text}
        ]

        response = await asyncio.to_thread(
            gpt_client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.8,
            max_tokens=600,
        )

        reply = response.choices[0].message.content.strip()
        await message.reply(reply)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        await message.reply("‚ö†Ô∏è –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –∑–∞–º–æ–ª—á–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def shutdown():
    print("–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ...")
    await bot.session.close()


# –ó–∞–ø—É—Å–∫
async def main():
    print("‚ú® –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥—É—Ö –ø—Ä–æ—Å–Ω—É–ª—Å—è.")
    try:
        await dp.start_polling(bot)
    finally:
        await shutdown()


if __name__ == "__main__":
    asyncio.run(main())
